{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\38097\\\\Documents\\\\goit-react-hw-02-feedback\\\\src\\\\components\\\\App.jsx\";\nimport { Component } from 'react';\nimport Feadback from './Feadback';\nimport Statistics from './Statistics';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class App extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      good: 0,\n      neutral: 0,\n      bad: 0\n    };\n\n    this.goodIncrement = () => {\n      this.setState(prevState => ({\n        good: prevState.good + 1\n      }));\n    };\n\n    this.neutralIncrement = () => {\n      this.setState(prevState => ({\n        neutral: prevState.neutral + 1\n      }));\n    };\n\n    this.badIncrement = () => {\n      this.setState(prevState => ({\n        bad: prevState.bad + 1\n      }));\n    };\n  }\n\n  render() {\n    const {\n      good,\n      neutral,\n      bad\n    } = this.state;\n    const countTotalFeedback = good + neutral + bad;\n    const countPositiveFeedbackPercentage = Math.round((good + neutral) * 100 / countTotalFeedback);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Feadback, {\n        onGood: this.goodIncrement,\n        onNeutral: this.neutralIncrement,\n        onBad: this.badIncrement\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Statistics, {\n        good: good,\n        neutral: neutral,\n        bad: bad,\n        total: countTotalFeedback,\n        positivePercentage: countPositiveFeedbackPercentage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/38097/Documents/goit-react-hw-02-feedback/src/components/App.jsx"],"names":["Component","Feadback","Statistics","App","state","good","neutral","bad","goodIncrement","setState","prevState","neutralIncrement","badIncrement","render","countTotalFeedback","countPositiveFeedbackPercentage","Math","round"],"mappings":";AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,UAAP,MAAuB,cAAvB;;AAEA,OAAO,MAAMC,GAAN,SAAkBH,SAAlB,CAA4B;AAAA;AAAA;AAAA,SACjCI,KADiC,GACzB;AACNC,MAAAA,IAAI,EAAE,CADA;AAENC,MAAAA,OAAO,EAAE,CAFH;AAGNC,MAAAA,GAAG,EAAE;AAHC,KADyB;;AAAA,SAOjCC,aAPiC,GAOjB,MAAM;AACpB,WAAKC,QAAL,CAAcC,SAAS,KAAK;AAC1BL,QAAAA,IAAI,EAAEK,SAAS,CAACL,IAAV,GAAiB;AADG,OAAL,CAAvB;AAGD,KAXgC;;AAAA,SAajCM,gBAbiC,GAad,MAAM;AACvB,WAAKF,QAAL,CAAcC,SAAS,KAAK;AAC1BJ,QAAAA,OAAO,EAAEI,SAAS,CAACJ,OAAV,GAAoB;AADH,OAAL,CAAvB;AAGD,KAjBgC;;AAAA,SAmBjCM,YAnBiC,GAmBlB,MAAM;AACnB,WAAKH,QAAL,CAAcC,SAAS,KAAK;AAC1BH,QAAAA,GAAG,EAAEG,SAAS,CAACH,GAAV,GAAgB;AADK,OAAL,CAAvB;AAGD,KAvBgC;AAAA;;AAyBjCM,EAAAA,MAAM,GAAG;AACP,UAAM;AAAER,MAAAA,IAAF;AAAQC,MAAAA,OAAR;AAAiBC,MAAAA;AAAjB,QAAyB,KAAKH,KAApC;AACA,UAAMU,kBAAkB,GAAGT,IAAI,GAAGC,OAAP,GAAiBC,GAA5C;AACA,UAAMQ,+BAA+B,GAAGC,IAAI,CAACC,KAAL,CACrC,CAACZ,IAAI,GAAGC,OAAR,IAAmB,GAApB,GAA2BQ,kBADW,CAAxC;AAGA,wBACE;AAAA,8BACE,QAAC,QAAD;AACE,QAAA,MAAM,EAAE,KAAKN,aADf;AAEE,QAAA,SAAS,EAAE,KAAKG,gBAFlB;AAGE,QAAA,KAAK,EAAE,KAAKC;AAHd;AAAA;AAAA;AAAA;AAAA,cADF,eAME,QAAC,UAAD;AACE,QAAA,IAAI,EAAEP,IADR;AAEE,QAAA,OAAO,EAAEC,OAFX;AAGE,QAAA,GAAG,EAAEC,GAHP;AAIE,QAAA,KAAK,EAAEO,kBAJT;AAKE,QAAA,kBAAkB,EAAEC;AALtB;AAAA;AAAA;AAAA;AAAA,cANF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAgBD;;AA/CgC","sourcesContent":["import { Component } from 'react';\nimport Feadback from './Feadback';\nimport Statistics from './Statistics';\n\nexport class App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  goodIncrement = () => {\n    this.setState(prevState => ({\n      good: prevState.good + 1,\n    }));\n  };\n\n  neutralIncrement = () => {\n    this.setState(prevState => ({\n      neutral: prevState.neutral + 1,\n    }));\n  };\n\n  badIncrement = () => {\n    this.setState(prevState => ({\n      bad: prevState.bad + 1,\n    }));\n  };\n\n  render() {\n    const { good, neutral, bad } = this.state;\n    const countTotalFeedback = good + neutral + bad;\n    const countPositiveFeedbackPercentage = Math.round(\n      ((good + neutral) * 100) / countTotalFeedback\n    );\n    return (\n      <div>\n        <Feadback\n          onGood={this.goodIncrement}\n          onNeutral={this.neutralIncrement}\n          onBad={this.badIncrement}\n        />\n        <Statistics\n          good={good}\n          neutral={neutral}\n          bad={bad}\n          total={countTotalFeedback}\n          positivePercentage={countPositiveFeedbackPercentage}\n        />\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}