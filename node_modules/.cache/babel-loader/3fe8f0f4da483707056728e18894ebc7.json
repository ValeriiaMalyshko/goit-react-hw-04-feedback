{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\38097\\\\Documents\\\\goit-react-hw-04-feedback\\\\src\\\\components\\\\App.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react'; // import React, { Component } from 'react';\n\nimport FeedbackOptions from './Feedback/FeedbackOptions';\nimport Statistics from './Statistics/Statistics';\nimport Section from './Section/Section';\nimport Notification from './Notification/Notification';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n  const total = useRef(0);\n  const countPositiveFeedbackPercentage = Math.round(this.state.good / total * 100);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Section, {\n      text: \"Please leave headback\",\n      children: /*#__PURE__*/_jsxDEV(FeedbackOptions, {\n        options: feedbacks,\n        onLeaveFeedback: this.setElement\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this), total > 0 ? /*#__PURE__*/_jsxDEV(Section, {\n      text: \"Statistics\",\n      children: /*#__PURE__*/_jsxDEV(Statistics, {\n        good: good,\n        neutral: neutral,\n        bad: bad,\n        total: total,\n        positivePercentage: countPositiveFeedbackPercentage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Notification, {\n      message: \"There is no feedback\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n} // export class App extends Component {\n//   state = {\n//     good: 0,\n//     neutral: 0,\n//     bad: 0,\n//   };\n//   setElement = element => {\n//     this.setState(prevState => ({ [element]: prevState[element] + 1 }));\n//   };\n//   countTotalFeedback = () => {\n//     const elements = Object.values(this.state);\n//     return elements.reduce((total, element) => total + element, 0);\n//   };\n//   render() {\n//     const feedbacks = Object.keys(this.state);\n//     const total = this.countTotalFeedback();\n//     const countPositiveFeedbackPercentage = Math.round(\n//       (this.state.good / total) * 100\n//     );\n//     return (\n//       <>\n//         <Section text=\"Please leave headback\">\n//           <FeedbackOptions\n//             options={feedbacks}\n//             onLeaveFeedback={this.setElement}\n//           />\n//         </Section>\n//         {total > 0 ? (\n//           <Section text=\"Statistics\">\n//             <Statistics\n//               good={this.state.good}\n//               neutral={this.state.neutral}\n//               bad={this.state.bad}\n//               total={total}\n//               positivePercentage={countPositiveFeedbackPercentage}\n//             />\n//           </Section>\n//         ) : (\n//           <Notification message=\"There is no feedback\" />\n//         )}\n//       </>\n//     );\n//   }\n// }\n\n_s(App, \"cxsqKZwOWQTJR9HQrrIGmN5JG+M=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/38097/Documents/goit-react-hw-04-feedback/src/components/App.jsx"],"names":["React","useState","useEffect","useRef","FeedbackOptions","Statistics","Section","Notification","App","good","setGood","neutral","setNeutral","bad","setBad","total","countPositiveFeedbackPercentage","Math","round","state","feedbacks","setElement"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD,C,CACA;;AACA,OAAOC,eAAP,MAA4B,4BAA5B;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,OAAOC,YAAP,MAAyB,6BAAzB;;;AAEA,eAAe,SAASC,GAAT,GAAe;AAAA;;AAC5B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC,CAAD,CAAhC;AACA,QAAM,CAACU,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAAC,CAAD,CAAtC;AACA,QAAM,CAACY,GAAD,EAAMC,MAAN,IAAgBb,QAAQ,CAAC,CAAD,CAA9B;AAEA,QAAMc,KAAK,GAAGZ,MAAM,CAAC,CAAD,CAApB;AAEA,QAAMa,+BAA+B,GAAGC,IAAI,CAACC,KAAL,CACrC,KAAKC,KAAL,CAAWV,IAAX,GAAkBM,KAAnB,GAA4B,GADU,CAAxC;AAIA,sBACE;AAAA,4BACE,QAAC,OAAD;AAAS,MAAA,IAAI,EAAC,uBAAd;AAAA,6BACE,QAAC,eAAD;AACE,QAAA,OAAO,EAAEK,SADX;AAEE,QAAA,eAAe,EAAE,KAAKC;AAFxB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,EAOGN,KAAK,GAAG,CAAR,gBACC,QAAC,OAAD;AAAS,MAAA,IAAI,EAAC,YAAd;AAAA,6BACE,QAAC,UAAD;AACE,QAAA,IAAI,EAAEN,IADR;AAEE,QAAA,OAAO,EAAEE,OAFX;AAGE,QAAA,GAAG,EAAEE,GAHP;AAIE,QAAA,KAAK,EAAEE,KAJT;AAKE,QAAA,kBAAkB,EAAEC;AALtB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADD,gBAWC,QAAC,YAAD;AAAc,MAAA,OAAO,EAAC;AAAtB;AAAA;AAAA;AAAA;AAAA,YAlBJ;AAAA,kBADF;AAuBD,C,CAED;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;GAnFwBR,G;;KAAAA,G","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\n// import React, { Component } from 'react';\nimport FeedbackOptions from './Feedback/FeedbackOptions';\nimport Statistics from './Statistics/Statistics';\nimport Section from './Section/Section';\nimport Notification from './Notification/Notification';\n\nexport default function App() {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const total = useRef(0);\n\n  const countPositiveFeedbackPercentage = Math.round(\n    (this.state.good / total) * 100\n  );\n\n  return (\n    <>\n      <Section text=\"Please leave headback\">\n        <FeedbackOptions\n          options={feedbacks}\n          onLeaveFeedback={this.setElement}\n        />\n      </Section>\n      {total > 0 ? (\n        <Section text=\"Statistics\">\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={total}\n            positivePercentage={countPositiveFeedbackPercentage}\n          />\n        </Section>\n      ) : (\n        <Notification message=\"There is no feedback\" />\n      )}\n    </>\n  );\n}\n\n// export class App extends Component {\n//   state = {\n//     good: 0,\n//     neutral: 0,\n//     bad: 0,\n//   };\n\n//   setElement = element => {\n//     this.setState(prevState => ({ [element]: prevState[element] + 1 }));\n//   };\n\n//   countTotalFeedback = () => {\n//     const elements = Object.values(this.state);\n//     return elements.reduce((total, element) => total + element, 0);\n//   };\n\n//   render() {\n//     const feedbacks = Object.keys(this.state);\n//     const total = this.countTotalFeedback();\n//     const countPositiveFeedbackPercentage = Math.round(\n//       (this.state.good / total) * 100\n//     );\n\n//     return (\n//       <>\n//         <Section text=\"Please leave headback\">\n//           <FeedbackOptions\n//             options={feedbacks}\n//             onLeaveFeedback={this.setElement}\n//           />\n//         </Section>\n//         {total > 0 ? (\n//           <Section text=\"Statistics\">\n//             <Statistics\n//               good={this.state.good}\n//               neutral={this.state.neutral}\n//               bad={this.state.bad}\n//               total={total}\n//               positivePercentage={countPositiveFeedbackPercentage}\n//             />\n//           </Section>\n//         ) : (\n//           <Notification message=\"There is no feedback\" />\n//         )}\n//       </>\n//     );\n//   }\n// }\n"]},"metadata":{},"sourceType":"module"}